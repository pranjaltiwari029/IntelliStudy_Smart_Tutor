[
    {
        "front": "26. Remove Duplicates from Sorted Array\n\nGiven an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.\n\nConsider the number of unique elements of nums to be k, to get accepted, you need to do the following things:\n\nChange the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.\nReturn k.\nCustom Judge:\n\nThe judge will test your solution with the following code:\n\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\nIf all assertions pass, then your solution will be accepted.\n\n \n\nExample 1:\n\nInput: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\nExample 2:\n\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n \n\nConstraints:\n\n1 <= nums.length <= 3 * 104\n-100 <= nums[i] <= 100\nnums is sorted in non-decreasing order.\n",
        "back": "class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        int j = 1;\n        for(int i = 1; i < nums.size(); i++){\n            if(nums[i] != nums[i - 1]){\n                nums[j] = nums[i];\n                j++;\n            }\n        }\n        return j;\n    }\n};"
    },
    {
        "front": "2. Add Two Numbers\n\nYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n \nExample 1:\n\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\nExample 2:\n\nInput: l1 = [0], l2 = [0]\nOutput: [0]\nExample 3:\n\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]",
        "back": "class Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *dummy = new ListNode(0);\n        ListNode *curr = dummy;\n        int carry = 0;\n        \n        while(l1 != NULL || l2 != NULL || carry == 1){\n            int sum = 0;\n            if(l1 != NULL){\n                sum += l1->val;\n                l1 = l1->next;\n            }\n            if(l2 != NULL){\n                sum += l2->val;\n                l2 = l2->next;\n            }\n            sum += carry;\n            carry = sum/10;\n            ListNode *node = new ListNode(sum % 10);\n            curr->next = node;\n            curr = curr->next;\n        }\n        return dummy->next;\n    }\n};"
    },
    {
        "front": "7. Reverse Integer\nGiven a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\n\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\n\n \n\nExample 1:\n\nInput: x = 123\nOutput: 321\nExample 2:\n\nInput: x = -123\nOutput: -321\nExample 3:\n\nInput: x = 120\nOutput: 21\n \n\nConstraints:\n\n-231 <= x <= 231 - 1",
        "back": "class Solution {                      \npublic:\n    int reverse(int x) {\n        long r=0;      // decleare r \n        while(x){\n         r=r*10+x%10; // find remainder and add its to r\n         x=x/10;     // Update the value of x\n        }\n        if(r>INT_MAX || r<INT_MIN) return 0; // check range if r is outside the range then return 0  \n        return int(r);  // if r in the 32 bit range then return r\n    }\n}; "
    },
    {
        "front": "9. Palindrome Number\nGiven an integer x, return true if x is a palindrome, and false otherwise.\n\n \n\nExample 1:\n\nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.\nExample 2:\n\nInput: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\nExample 3:\n\nInput: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n \n\nConstraints:\n\n-231 <= x <= 231 - 1",
        "back": "class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if(x<0){\n            return false;\n        }\n\n        int rev=0;\n        int original=x;\n        while(x!=0){\n            if(rev > INT_MAX / 10 || (rev == INT_MAX / 10 && (x%10) > 7)) {\n                return false;\n            }\n            rev=(rev*10)+(x%10);\n            x=x/10;\n        }\n\n        return original==rev;\n    }\n};"
    }
]